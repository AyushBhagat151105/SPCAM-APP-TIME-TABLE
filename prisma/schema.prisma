// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id          String      @id @default(cuid())
  subjectname String
  subjectcode String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Timetable   Timetable[]
}

model Class {
  id        String      @id @default(cuid())
  classname String
  classroom String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Timetable Timetable[]
}

model Teacher {
  id          String      @id @default(cuid())
  teachername String
  password    String
  teachercode String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Timetable   Timetable[]
}

model Timetable {
  id        String   @id @default(cuid())
  day       String
  period    String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  starttime DateTime
  endtime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
